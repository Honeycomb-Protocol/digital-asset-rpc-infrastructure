//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "character_history"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: Vec<u8>,
    pub character_id: u64,
    pub event: String,
    pub event_data: Json,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub slot_updated: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    CharacterId,
    Event,
    EventData,
    CreatedAt,
    SlotUpdated,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    CompressedData
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Binary.def(),
            Self::CharacterId => ColumnType::BigInteger.def(),
            Self::Event => ColumnType::String(Some(64u32)).def(),
            Self::EventData => ColumnType::JsonBinary.def(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::SlotUpdated => ColumnType::BigInteger.def(),
        }
    }
}


impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::CompressedData => Entity::belongs_to(super::compressed_data::Entity)
                .from(Column::CharacterId)
                .to(super::compressed_data::Column::Id)
                .into(),
        }
    }
}

impl Related<super::compressed_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CompressedData.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
