//! SeaORM Entity. Generated by sea-orm-codegen 0.9.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "compressed_data"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: i64,
    pub tree_id: Vec<u8>,
    pub leaf_idx: i64,
    pub seq: i64,
    pub schema_validated: bool,
    pub raw_data: Vec<u8>,
    pub parsed_data: Json,
    pub program: Option<Vec<u8>>,
    pub created_at: Option<DateTimeWithTimeZone>,
    pub slot_updated: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    TreeId,
    LeafIdx,
    Seq,
    SchemaValidated,
    RawData,
    ParsedData,
    Program,
    CreatedAt,
    SlotUpdated,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i64;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::BigInteger.def(),
            Self::TreeId => ColumnType::Binary.def(),
            Self::LeafIdx => ColumnType::BigInteger.def(),
            Self::Seq => ColumnType::BigInteger.def(),
            Self::SchemaValidated => ColumnType::Boolean.def(),
            Self::RawData => ColumnType::Binary.def(),
            Self::ParsedData => ColumnType::JsonBinary.def(),
            Self::Program => ColumnType::Binary.def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::SlotUpdated => ColumnType::BigInteger.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
